# -*- coding: utf-8 -*-
"""mi_e22_session6_NER_FFNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16cx4cTEqNao_dLFueMKjVOm_1Xjs0LfO

<!-- <img align=center src="https://studyarchitecture.com/wp-content/uploads/mcgill-university-logo-png-transparent-cropped.png"></img> -->
<h2 align=center> Named Entity Recognition (NER) using FFNNs with Keras</h2>
"""



"""### Step 1 Set up packages"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
np.random.seed(0)
plt.style.use("ggplot")

import tensorflow as tf
print('Tensorflow version:', tf.__version__)
print('GPU detected:', tf.config.list_physical_devices('GPU'))

"""### Step 2: Load and Explore the NER Dataset

*tagged entities*:

Tag| Explaination
--- | ---
geo | Geographical Entity
org| Organization
per |Person
gpe |Geopolitical Entity
tim |Time indicator
art |Artifact
eve |Event
nat| Natural Phenomenon
"""



"""### Step 2b: Update the path below"""

data = pd.read_csv("C:/Users/nickl/Documents/MI/ner_dataset.csv", encoding="latin1")

data = data.ffill()
data.head(20)

print("Unique words in corpus:", data['Word'].nunique())
print("Unique tags in corpus:", data['Tag'].nunique())

words = list(set(data["Word"].values))
words.append("ENDPAD")
num_words = len(words)

tags = list(set(data["Tag"].values))
num_tags = len(tags)

"""### Steb 2c: Let's have a look at the class balance"""

import plotly.express as px

# This first plot shows all classes *except* for the 'O' class
#fig = px.histogram(data[~data.Tag.str.contains("O")], x="Tag",color="Tag")

#TODO: Compare with this plot, which shows *all* classes
fig = px.histogram(data, x="Tag",color="Tag")

fig.show()

"""### Step 3: Data Manipulation (integrate tokens from same sentence)

"""

import tqdm
def sentence_integrate(data):
  agg_func = lambda s: [(w, p, t) for w, p, t in zip(s["Word"].values.tolist(),
                                                           s["POS"].values.tolist(),
                                                           s["Tag"].values.tolist())]
  return data.groupby('Sentence #').apply(agg_func).tolist()

sentences=sentence_integrate(data)

import plotly.express as px

fig = px.histogram(pd.DataFrame([len(s) for s in sentences],columns=['length']),x="length",marginal='box')
fig.show()

sentences[0]

"""### Step 4: Build a vocabulary for words and tags"""

word2idx = {w: i + 1 for i, w in enumerate(words)}
tag2idx = {t: i for i, t in enumerate(tags)}

tag2idx

"""### Step 5: Unwrapping to individual words (necessary for the FFNN)"""

X = [word2idx[w[0]] for s in sentences for w in s]
y = [tag2idx[w[2]] for s in sentences for w in s]

"""###Steb 5b: We don't have time to train on everything :')"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, shuffle=False)

cutoff = 10000

x_train = x_train[:cutoff]
y_train = y_train[:cutoff]

"""### Step 6: Build an FFNN-based model for this dataset"""

from tensorflow import keras
from keras._tf_keras.keras.models import Sequential
from keras._tf_keras.keras.layers import Dense, Embedding
from keras._tf_keras.keras.layers import Input

# define the keras model
model = Sequential()

# Input Layer
model.add(Input(shape=(None,)))  # Adjust the shape as needed
model.add(Embedding(len(word2idx), 64))

model.add(Dense(16, activation='relu'))

# Hidden Layer(s)
model.add(Dense(16, activation='relu'))

# Output Layer
model.add(Dense(len(tag2idx), activation='softmax'))

model.build()
model.summary()

model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])

"""### Step 7: Train the Model"""
from keras._tf_keras.keras.callbacks import ModelCheckpoint, EarlyStopping
from livelossplot.tf_keras import PlotLossesCallback

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
logdir="log/"
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=logdir)

# #chkpt = ModelCheckpoint("model_weights.h5", monitor='val_loss',verbose=1, save_best_only=True, save_weights_only=True, mode='min')
# 
# #early_stopping = EarlyStopping(monitor='val_accuracy', min_delta=0, patience=1, verbose=0, mode='max', baseline=None, restore_best_weights=False)
# 
# #callbacks = [PlotLossesCallback(), chkpt, early_stopping,tensorboard_callback]
callbacks = [PlotLossesCallback(), tensorboard_callback]

# Convert to numpy arrays
# Convert to numpy arrays and reshape
x_train = np.array(x_train).reshape(-1, 1)
y_train = np.array(y_train).reshape(-1, 1)
x_test = np.array(x_test).reshape(-1, 1)
y_test = np.array(y_test).reshape(-1, 1)

history = model.fit(
    x=x_train,
    y=y_train,
    validation_data=(x_test,y_test),
    batch_size=32,
    epochs=6,
    callbacks=callbacks,
    verbose=1
)

model.predict(x_test)

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

# %tensorboard --logdir log

"""#### Apply TensorBoard to check the detailed structure and performance

### Step 8: Evaluate the performance of Named Entity Recognition Model
"""
i = np.random.randint(0, len(x_test) - 50)
print("This is sentence:", i)
p = model.predict(x_test[i:i+50].reshape(1, -1))
p = np.argmax(p, axis=-1)
print(i, p)

print("{:15}{:5}\t {}\n".format("Word", "True", "Pred"))
print("-" * 30)
for w, true, pred in zip(x_test[i:i+50], y_test[i:i+50], p[0]):
    print("{:15}{}\t{}".format(words[w[0] - 1], tags[true[0]], tags[pred]))

from sklearn.metrics import f1_score

print("Evaluate on test data")
results = model.evaluate(x_test, y_test, batch_size=128)
print("test loss: {} ".format(results[0]))
print("test accuracy: {} ".format(results[1]))

# Get predictions for the entire test set
out = model.predict(x_test)
preds = np.argmax(out, axis=-1)  # Change axis to -1

# Print shapes for debugging
print("y_test shape:", y_test.shape)
print("predictions shape:", preds.shape)

# Ensure consistent shapes
y_test_flat = y_test.reshape(-1)  # Flatten to 1D array
preds_flat = preds.reshape(-1)    # Flatten predictions to same shape

# Calculate and print F1 score
print("F1 score: ", f1_score(y_test_flat, preds_flat, average='macro'))
